-- Create the set_updated_at function
CREATE OR REPLACE FUNCTION public.set_updated_at()
    RETURNS TRIGGER
    AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN new;
END;
$$
LANGUAGE plpgsql;

CREATE TABLE table_widgets(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prefixed_id text NOT NULL,
    user_id uuid NOT NULL,
    widgets jsonb NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (prefixed_id, user_id)
);

ALTER TABLE table_widgets ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Authenticated user can manage their table widgets" ON table_widgets
    FOR ALL TO authenticated
        USING (auth.uid() = user_id);

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON table_widgets
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

-- Create a new table for widget preferences
CREATE TABLE widget_preferences(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prefixed_id text NOT NULL,
    user_id uuid NOT NULL,
    active_engine text,
    preferences jsonb NOT NULL DEFAULT '{}' ::jsonb,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (prefixed_id, user_id)
);

ALTER TABLE widget_preferences ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Authenticated user can manage their widget preferences" ON widget_preferences
    FOR ALL TO authenticated
        USING (auth.uid() = user_id);

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON widget_preferences
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

