create sequence "public"."notes_id_seq";

create table "public"."custom_type" (
    "id" uuid not null default gen_random_uuid(),
    "kind" text not null,
    "name" text not null,
    "description" text not null,
    "rules" text[] not null default '{}'::text[],
    "examples" text[] not null default '{}'::text[],
    "not_examples" text[] not null default '{}'::text[],
    "user_id" uuid not null,
    "values_key" text generated always as (
CASE
    WHEN (kind = 'enum'::text) THEN ('br-values-'::text || id)
    ELSE NULL::text
END) stored,
    "min_value" numeric not null default '-Infinity'::numeric,
    "max_value" numeric not null default 'Infinity'::numeric,
    "log_scale" boolean not null default false,
    "public" boolean not null default false,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."custom_type" enable row level security;

create table "public"."dirty_custom_type" (
    "id" bigint generated by default as identity not null,
    "type_id" uuid not null,
    "table_identification_id" bigint not null,
    "user_id" uuid not null,
    "marked_at" timestamp with time zone not null default now()
);


alter table "public"."dirty_custom_type" enable row level security;

create table "public"."file" (
    "id" text not null,
    "name" text not null,
    "size" bigint not null,
    "bucket_id" text not null,
    "object_path" text not null,
    "user_id" uuid not null,
    "mime_type" text,
    "latest_task_id" text
);


alter table "public"."file" enable row level security;

create table "public"."notes" (
    "id" integer not null default nextval('notes_id_seq'::regclass),
    "title" text,
    "user_id" uuid not null
);


alter table "public"."notes" enable row level security;

create table "public"."table_identification" (
    "id" bigint generated by default as identity not null,
    "prefixed_id" text not null,
    "user_id" uuid not null,
    "identifications" jsonb not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."table_identification" enable row level security;

create table "public"."table_widgets" (
    "id" bigint generated by default as identity not null,
    "prefixed_id" text not null,
    "user_id" uuid not null,
    "widgets" jsonb not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."table_widgets" enable row level security;

create table "public"."task_link" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "type" text,
    "task_id" text not null,
    "task_created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "task_finished_at" timestamp with time zone,
    "task_error" text
);


alter table "public"."task_link" enable row level security;

create table "public"."tool" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "user_id" uuid not null
);


alter table "public"."tool" enable row level security;

create table "public"."widget_preferences" (
    "id" bigint generated by default as identity not null,
    "prefixed_id" text not null,
    "user_id" uuid not null,
    "active_engine" text,
    "preferences" jsonb not null default '{}'::jsonb,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."widget_preferences" enable row level security;

alter sequence "public"."notes_id_seq" owned by "public"."notes"."id";

CREATE UNIQUE INDEX custom_type_name_user_id_key ON public.custom_type USING btree (name, user_id);

CREATE UNIQUE INDEX custom_type_pkey ON public.custom_type USING btree (id);

CREATE UNIQUE INDEX dirty_custom_type_pkey ON public.dirty_custom_type USING btree (id);

CREATE UNIQUE INDEX dirty_custom_type_type_id_table_identification_id_user_id_key ON public.dirty_custom_type USING btree (type_id, table_identification_id, user_id);

CREATE UNIQUE INDEX file_pkey ON public.file USING btree (id);

CREATE UNIQUE INDEX notes_pkey ON public.notes USING btree (id);

CREATE UNIQUE INDEX table_identification_pkey ON public.table_identification USING btree (id);

CREATE UNIQUE INDEX table_identification_prefixed_id_user_id_key ON public.table_identification USING btree (prefixed_id, user_id);

CREATE UNIQUE INDEX table_widgets_pkey ON public.table_widgets USING btree (id);

CREATE UNIQUE INDEX table_widgets_prefixed_id_user_id_key ON public.table_widgets USING btree (prefixed_id, user_id);

CREATE UNIQUE INDEX task_link_pkey ON public.task_link USING btree (id);

CREATE UNIQUE INDEX tool_name_user_id_key ON public.tool USING btree (name, user_id);

CREATE UNIQUE INDEX tool_pkey ON public.tool USING btree (id);

CREATE UNIQUE INDEX widget_preferences_pkey ON public.widget_preferences USING btree (id);

CREATE UNIQUE INDEX widget_preferences_prefixed_id_user_id_key ON public.widget_preferences USING btree (prefixed_id, user_id);

alter table "public"."custom_type" add constraint "custom_type_pkey" PRIMARY KEY using index "custom_type_pkey";

alter table "public"."dirty_custom_type" add constraint "dirty_custom_type_pkey" PRIMARY KEY using index "dirty_custom_type_pkey";

alter table "public"."file" add constraint "file_pkey" PRIMARY KEY using index "file_pkey";

alter table "public"."notes" add constraint "notes_pkey" PRIMARY KEY using index "notes_pkey";

alter table "public"."table_identification" add constraint "table_identification_pkey" PRIMARY KEY using index "table_identification_pkey";

alter table "public"."table_widgets" add constraint "table_widgets_pkey" PRIMARY KEY using index "table_widgets_pkey";

alter table "public"."task_link" add constraint "task_link_pkey" PRIMARY KEY using index "task_link_pkey";

alter table "public"."tool" add constraint "tool_pkey" PRIMARY KEY using index "tool_pkey";

alter table "public"."widget_preferences" add constraint "widget_preferences_pkey" PRIMARY KEY using index "widget_preferences_pkey";

alter table "public"."custom_type" add constraint "custom_type_kind_check" CHECK ((kind = ANY (ARRAY['decimal'::text, 'integer'::text, 'enum'::text, 'date'::text, 'time'::text]))) not valid;

alter table "public"."custom_type" validate constraint "custom_type_kind_check";

alter table "public"."custom_type" add constraint "custom_type_name_user_id_key" UNIQUE using index "custom_type_name_user_id_key";

alter table "public"."dirty_custom_type" add constraint "dirty_custom_type_table_identification_id_fkey" FOREIGN KEY (table_identification_id) REFERENCES table_identification(id) ON DELETE CASCADE not valid;

alter table "public"."dirty_custom_type" validate constraint "dirty_custom_type_table_identification_id_fkey";

alter table "public"."dirty_custom_type" add constraint "dirty_custom_type_type_id_fkey" FOREIGN KEY (type_id) REFERENCES custom_type(id) ON DELETE CASCADE not valid;

alter table "public"."dirty_custom_type" validate constraint "dirty_custom_type_type_id_fkey";

alter table "public"."dirty_custom_type" add constraint "dirty_custom_type_type_id_table_identification_id_user_id_key" UNIQUE using index "dirty_custom_type_type_id_table_identification_id_user_id_key";

alter table "public"."table_identification" add constraint "table_identification_prefixed_id_user_id_key" UNIQUE using index "table_identification_prefixed_id_user_id_key";

alter table "public"."table_widgets" add constraint "table_widgets_prefixed_id_user_id_key" UNIQUE using index "table_widgets_prefixed_id_user_id_key";

alter table "public"."tool" add constraint "tool_name_user_id_key" UNIQUE using index "tool_name_user_id_key";

alter table "public"."widget_preferences" add constraint "widget_preferences_prefixed_id_user_id_key" UNIQUE using index "widget_preferences_prefixed_id_user_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.find_tables_using_custom_type(type_id_param uuid)
 RETURNS TABLE(prefixed_id text)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY WITH identification_columns AS(
        SELECT
            ti.prefixed_id,
            jsonb_object_keys(ti.identifications::jsonb -> 'identifications') AS column_key
        FROM
            table_identification ti
)
    SELECT DISTINCT
        ic.prefixed_id
    FROM
        identification_columns ic
        JOIN table_identification ti ON ic.prefixed_id = ti.prefixed_id
    WHERE
        -- Check if the JSON at this path has the properties we're looking for
(ti.identifications::jsonb -> 'identifications' -> ic.column_key -> 'is_custom')::boolean = TRUE
        AND(ti.identifications::jsonb -> 'identifications' -> ic.column_key ->> 'id') = type_id_param::text;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_unique_custom_type_name(suggested_name text, user_id_param uuid)
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
    result text;
BEGIN
    WITH numbered_names AS (
        -- Find all existing names that match the pattern "name-number"
        SELECT
            (regexp_match(name, '^' || suggested_name || '(?:-(\d+))?$'))[1]::integer AS num
        FROM
            custom_type
        WHERE
            name = suggested_name -- exact match
            OR name ~('^' || suggested_name || '-\d+$') -- pattern match
            AND user_id = user_id_param
)
    SELECT
        CASE WHEN NOT EXISTS (
            SELECT
                1
            FROM
                custom_type
            WHERE
                name = suggested_name
                AND user_id = user_id_param) THEN
            suggested_name -- if exact name doesn't exist, use it
        ELSE
            suggested_name || '-' ||(coalesce((
                    SELECT
                        min(n)::text
                    FROM generate_series(1,(
                            SELECT
                                coalesce(max(num), 0) + 1
                            FROM numbered_names)) n
                WHERE
                    n NOT IN (
                        SELECT
                            coalesce(num, 0)
                        FROM numbered_names)), '1'))
        END INTO result;
    RETURN result;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_user_storage_usage()
 RETURNS bigint
 LANGUAGE sql
 SECURITY DEFINER
AS $function$
    SELECT
        COALESCE(SUM(size), 0)
    FROM
        public.file
    WHERE
        file.user_id = auth.uid();
$function$
;

CREATE OR REPLACE FUNCTION public.set_updated_at()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN new;
END;
$function$
;

grant delete on table "public"."custom_type" to "anon";

grant insert on table "public"."custom_type" to "anon";

grant references on table "public"."custom_type" to "anon";

grant select on table "public"."custom_type" to "anon";

grant trigger on table "public"."custom_type" to "anon";

grant truncate on table "public"."custom_type" to "anon";

grant update on table "public"."custom_type" to "anon";

grant delete on table "public"."custom_type" to "authenticated";

grant insert on table "public"."custom_type" to "authenticated";

grant references on table "public"."custom_type" to "authenticated";

grant select on table "public"."custom_type" to "authenticated";

grant trigger on table "public"."custom_type" to "authenticated";

grant truncate on table "public"."custom_type" to "authenticated";

grant update on table "public"."custom_type" to "authenticated";

grant delete on table "public"."custom_type" to "service_role";

grant insert on table "public"."custom_type" to "service_role";

grant references on table "public"."custom_type" to "service_role";

grant select on table "public"."custom_type" to "service_role";

grant trigger on table "public"."custom_type" to "service_role";

grant truncate on table "public"."custom_type" to "service_role";

grant update on table "public"."custom_type" to "service_role";

grant delete on table "public"."dirty_custom_type" to "anon";

grant insert on table "public"."dirty_custom_type" to "anon";

grant references on table "public"."dirty_custom_type" to "anon";

grant select on table "public"."dirty_custom_type" to "anon";

grant trigger on table "public"."dirty_custom_type" to "anon";

grant truncate on table "public"."dirty_custom_type" to "anon";

grant update on table "public"."dirty_custom_type" to "anon";

grant delete on table "public"."dirty_custom_type" to "authenticated";

grant insert on table "public"."dirty_custom_type" to "authenticated";

grant references on table "public"."dirty_custom_type" to "authenticated";

grant select on table "public"."dirty_custom_type" to "authenticated";

grant trigger on table "public"."dirty_custom_type" to "authenticated";

grant truncate on table "public"."dirty_custom_type" to "authenticated";

grant update on table "public"."dirty_custom_type" to "authenticated";

grant delete on table "public"."dirty_custom_type" to "service_role";

grant insert on table "public"."dirty_custom_type" to "service_role";

grant references on table "public"."dirty_custom_type" to "service_role";

grant select on table "public"."dirty_custom_type" to "service_role";

grant trigger on table "public"."dirty_custom_type" to "service_role";

grant truncate on table "public"."dirty_custom_type" to "service_role";

grant update on table "public"."dirty_custom_type" to "service_role";

grant delete on table "public"."file" to "anon";

grant insert on table "public"."file" to "anon";

grant references on table "public"."file" to "anon";

grant select on table "public"."file" to "anon";

grant trigger on table "public"."file" to "anon";

grant truncate on table "public"."file" to "anon";

grant update on table "public"."file" to "anon";

grant delete on table "public"."file" to "authenticated";

grant insert on table "public"."file" to "authenticated";

grant references on table "public"."file" to "authenticated";

grant select on table "public"."file" to "authenticated";

grant trigger on table "public"."file" to "authenticated";

grant truncate on table "public"."file" to "authenticated";

grant update on table "public"."file" to "authenticated";

grant delete on table "public"."file" to "service_role";

grant insert on table "public"."file" to "service_role";

grant references on table "public"."file" to "service_role";

grant select on table "public"."file" to "service_role";

grant trigger on table "public"."file" to "service_role";

grant truncate on table "public"."file" to "service_role";

grant update on table "public"."file" to "service_role";

grant delete on table "public"."notes" to "anon";

grant insert on table "public"."notes" to "anon";

grant references on table "public"."notes" to "anon";

grant select on table "public"."notes" to "anon";

grant trigger on table "public"."notes" to "anon";

grant truncate on table "public"."notes" to "anon";

grant update on table "public"."notes" to "anon";

grant delete on table "public"."notes" to "authenticated";

grant insert on table "public"."notes" to "authenticated";

grant references on table "public"."notes" to "authenticated";

grant select on table "public"."notes" to "authenticated";

grant trigger on table "public"."notes" to "authenticated";

grant truncate on table "public"."notes" to "authenticated";

grant update on table "public"."notes" to "authenticated";

grant delete on table "public"."notes" to "service_role";

grant insert on table "public"."notes" to "service_role";

grant references on table "public"."notes" to "service_role";

grant select on table "public"."notes" to "service_role";

grant trigger on table "public"."notes" to "service_role";

grant truncate on table "public"."notes" to "service_role";

grant update on table "public"."notes" to "service_role";

grant delete on table "public"."table_identification" to "anon";

grant insert on table "public"."table_identification" to "anon";

grant references on table "public"."table_identification" to "anon";

grant select on table "public"."table_identification" to "anon";

grant trigger on table "public"."table_identification" to "anon";

grant truncate on table "public"."table_identification" to "anon";

grant update on table "public"."table_identification" to "anon";

grant delete on table "public"."table_identification" to "authenticated";

grant insert on table "public"."table_identification" to "authenticated";

grant references on table "public"."table_identification" to "authenticated";

grant select on table "public"."table_identification" to "authenticated";

grant trigger on table "public"."table_identification" to "authenticated";

grant truncate on table "public"."table_identification" to "authenticated";

grant update on table "public"."table_identification" to "authenticated";

grant delete on table "public"."table_identification" to "service_role";

grant insert on table "public"."table_identification" to "service_role";

grant references on table "public"."table_identification" to "service_role";

grant select on table "public"."table_identification" to "service_role";

grant trigger on table "public"."table_identification" to "service_role";

grant truncate on table "public"."table_identification" to "service_role";

grant update on table "public"."table_identification" to "service_role";

grant delete on table "public"."table_widgets" to "anon";

grant insert on table "public"."table_widgets" to "anon";

grant references on table "public"."table_widgets" to "anon";

grant select on table "public"."table_widgets" to "anon";

grant trigger on table "public"."table_widgets" to "anon";

grant truncate on table "public"."table_widgets" to "anon";

grant update on table "public"."table_widgets" to "anon";

grant delete on table "public"."table_widgets" to "authenticated";

grant insert on table "public"."table_widgets" to "authenticated";

grant references on table "public"."table_widgets" to "authenticated";

grant select on table "public"."table_widgets" to "authenticated";

grant trigger on table "public"."table_widgets" to "authenticated";

grant truncate on table "public"."table_widgets" to "authenticated";

grant update on table "public"."table_widgets" to "authenticated";

grant delete on table "public"."table_widgets" to "service_role";

grant insert on table "public"."table_widgets" to "service_role";

grant references on table "public"."table_widgets" to "service_role";

grant select on table "public"."table_widgets" to "service_role";

grant trigger on table "public"."table_widgets" to "service_role";

grant truncate on table "public"."table_widgets" to "service_role";

grant update on table "public"."table_widgets" to "service_role";

grant delete on table "public"."task_link" to "anon";

grant insert on table "public"."task_link" to "anon";

grant references on table "public"."task_link" to "anon";

grant select on table "public"."task_link" to "anon";

grant trigger on table "public"."task_link" to "anon";

grant truncate on table "public"."task_link" to "anon";

grant update on table "public"."task_link" to "anon";

grant delete on table "public"."task_link" to "authenticated";

grant insert on table "public"."task_link" to "authenticated";

grant references on table "public"."task_link" to "authenticated";

grant select on table "public"."task_link" to "authenticated";

grant trigger on table "public"."task_link" to "authenticated";

grant truncate on table "public"."task_link" to "authenticated";

grant update on table "public"."task_link" to "authenticated";

grant delete on table "public"."task_link" to "service_role";

grant insert on table "public"."task_link" to "service_role";

grant references on table "public"."task_link" to "service_role";

grant select on table "public"."task_link" to "service_role";

grant trigger on table "public"."task_link" to "service_role";

grant truncate on table "public"."task_link" to "service_role";

grant update on table "public"."task_link" to "service_role";

grant delete on table "public"."tool" to "anon";

grant insert on table "public"."tool" to "anon";

grant references on table "public"."tool" to "anon";

grant select on table "public"."tool" to "anon";

grant trigger on table "public"."tool" to "anon";

grant truncate on table "public"."tool" to "anon";

grant update on table "public"."tool" to "anon";

grant delete on table "public"."tool" to "authenticated";

grant insert on table "public"."tool" to "authenticated";

grant references on table "public"."tool" to "authenticated";

grant select on table "public"."tool" to "authenticated";

grant trigger on table "public"."tool" to "authenticated";

grant truncate on table "public"."tool" to "authenticated";

grant update on table "public"."tool" to "authenticated";

grant delete on table "public"."tool" to "service_role";

grant insert on table "public"."tool" to "service_role";

grant references on table "public"."tool" to "service_role";

grant select on table "public"."tool" to "service_role";

grant trigger on table "public"."tool" to "service_role";

grant truncate on table "public"."tool" to "service_role";

grant update on table "public"."tool" to "service_role";

grant delete on table "public"."widget_preferences" to "anon";

grant insert on table "public"."widget_preferences" to "anon";

grant references on table "public"."widget_preferences" to "anon";

grant select on table "public"."widget_preferences" to "anon";

grant trigger on table "public"."widget_preferences" to "anon";

grant truncate on table "public"."widget_preferences" to "anon";

grant update on table "public"."widget_preferences" to "anon";

grant delete on table "public"."widget_preferences" to "authenticated";

grant insert on table "public"."widget_preferences" to "authenticated";

grant references on table "public"."widget_preferences" to "authenticated";

grant select on table "public"."widget_preferences" to "authenticated";

grant trigger on table "public"."widget_preferences" to "authenticated";

grant truncate on table "public"."widget_preferences" to "authenticated";

grant update on table "public"."widget_preferences" to "authenticated";

grant delete on table "public"."widget_preferences" to "service_role";

grant insert on table "public"."widget_preferences" to "service_role";

grant references on table "public"."widget_preferences" to "service_role";

grant select on table "public"."widget_preferences" to "service_role";

grant trigger on table "public"."widget_preferences" to "service_role";

grant truncate on table "public"."widget_preferences" to "service_role";

grant update on table "public"."widget_preferences" to "service_role";

create policy "Anyone can read public custom types"
on "public"."custom_type"
as permissive
for select
to public
using ((public = true));


create policy "Users can manage their own custom types"
on "public"."custom_type"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));


create policy "Authenticated users manage their dirty custom types"
on "public"."dirty_custom_type"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));


create policy "Authenticated user can manage their files"
on "public"."file"
as permissive
for all
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Authenticated user can manage their notes"
on "public"."notes"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));


create policy "Authenticated user can manage their table identifications"
on "public"."table_identification"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));


create policy "Authenticated user can manage their table widgets"
on "public"."table_widgets"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));


create policy "Authenticated users can manage their task links"
on "public"."task_link"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));


create policy "Authenticated user can manage their tools"
on "public"."tool"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));


create policy "Authenticated user can manage their widget preferences"
on "public"."widget_preferences"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));


CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.table_identification FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.table_widgets FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.widget_preferences FOR EACH ROW EXECUTE FUNCTION set_updated_at();


