drop trigger if exists "set_updated_at" on "public"."column_filters";

drop trigger if exists "set_updated_at" on "public"."table_widgets";

drop policy "Authenticated user can manage their column filters" on "public"."column_filters";

drop policy "Authenticated user can manage their table widgets" on "public"."table_widgets";

revoke delete on table "public"."column_filters" from "anon";

revoke insert on table "public"."column_filters" from "anon";

revoke references on table "public"."column_filters" from "anon";

revoke select on table "public"."column_filters" from "anon";

revoke trigger on table "public"."column_filters" from "anon";

revoke truncate on table "public"."column_filters" from "anon";

revoke update on table "public"."column_filters" from "anon";

revoke delete on table "public"."column_filters" from "authenticated";

revoke insert on table "public"."column_filters" from "authenticated";

revoke references on table "public"."column_filters" from "authenticated";

revoke select on table "public"."column_filters" from "authenticated";

revoke trigger on table "public"."column_filters" from "authenticated";

revoke truncate on table "public"."column_filters" from "authenticated";

revoke update on table "public"."column_filters" from "authenticated";

revoke delete on table "public"."column_filters" from "service_role";

revoke insert on table "public"."column_filters" from "service_role";

revoke references on table "public"."column_filters" from "service_role";

revoke select on table "public"."column_filters" from "service_role";

revoke trigger on table "public"."column_filters" from "service_role";

revoke truncate on table "public"."column_filters" from "service_role";

revoke update on table "public"."column_filters" from "service_role";

revoke delete on table "public"."table_widgets" from "anon";

revoke insert on table "public"."table_widgets" from "anon";

revoke references on table "public"."table_widgets" from "anon";

revoke select on table "public"."table_widgets" from "anon";

revoke trigger on table "public"."table_widgets" from "anon";

revoke truncate on table "public"."table_widgets" from "anon";

revoke update on table "public"."table_widgets" from "anon";

revoke delete on table "public"."table_widgets" from "authenticated";

revoke insert on table "public"."table_widgets" from "authenticated";

revoke references on table "public"."table_widgets" from "authenticated";

revoke select on table "public"."table_widgets" from "authenticated";

revoke trigger on table "public"."table_widgets" from "authenticated";

revoke truncate on table "public"."table_widgets" from "authenticated";

revoke update on table "public"."table_widgets" from "authenticated";

revoke delete on table "public"."table_widgets" from "service_role";

revoke insert on table "public"."table_widgets" from "service_role";

revoke references on table "public"."table_widgets" from "service_role";

revoke select on table "public"."table_widgets" from "service_role";

revoke trigger on table "public"."table_widgets" from "service_role";

revoke truncate on table "public"."table_widgets" from "service_role";

revoke update on table "public"."table_widgets" from "service_role";

alter table "public"."column_filters" drop constraint "column_filters_table_identification_id_column_index_key";

alter table "public"."column_filters" drop constraint "column_filters_table_identification_id_fkey";

alter table "public"."table_widgets" drop constraint "table_widgets_prefixed_id_user_id_key";

alter table "public"."column_filters" drop constraint "column_filters_pkey";

alter table "public"."table_widgets" drop constraint "table_widgets_pkey";

drop index if exists "public"."column_filters_pkey";

drop index if exists "public"."column_filters_table_identification_id_column_index_key";

drop index if exists "public"."table_widgets_pkey";

drop index if exists "public"."table_widgets_prefixed_id_user_id_key";

drop table "public"."column_filters";

drop table "public"."table_widgets";

create table "public"."column_filter" (
    "id" bigint generated by default as identity not null,
    "table_identification_id" bigint not null,
    "column_index" integer not null,
    "filter_type" text not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."column_filter" enable row level security;

create table "public"."widget" (
    "id" bigint generated by default as identity not null,
    "prefixed_id" text not null,
    "user_id" uuid not null,
    "widget_id" text not null,
    "engine" text not null,
    "type" text not null,
    "name" text not null,
    "description" text not null,
    "is_suggested" boolean not null default false,
    "display_order" integer,
    "vega_lite_spec" jsonb,
    "observable_plot_code" text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."widget" enable row level security;

CREATE UNIQUE INDEX column_filter_pkey ON public.column_filter USING btree (id);

CREATE UNIQUE INDEX column_filter_table_identification_id_column_index_key ON public.column_filter USING btree (table_identification_id, column_index);

CREATE UNIQUE INDEX widget_pkey ON public.widget USING btree (id);

CREATE UNIQUE INDEX widget_prefixed_id_user_id_widget_id_key ON public.widget USING btree (prefixed_id, user_id, widget_id);

alter table "public"."column_filter" add constraint "column_filter_pkey" PRIMARY KEY using index "column_filter_pkey";

alter table "public"."widget" add constraint "widget_pkey" PRIMARY KEY using index "widget_pkey";

alter table "public"."column_filter" add constraint "column_filter_table_identification_id_column_index_key" UNIQUE using index "column_filter_table_identification_id_column_index_key";

alter table "public"."column_filter" add constraint "column_filter_table_identification_id_fkey" FOREIGN KEY (table_identification_id) REFERENCES table_identification(id) ON DELETE CASCADE not valid;

alter table "public"."column_filter" validate constraint "column_filter_table_identification_id_fkey";

alter table "public"."widget" add constraint "widget_prefixed_id_user_id_widget_id_key" UNIQUE using index "widget_prefixed_id_user_id_widget_id_key";

grant delete on table "public"."column_filter" to "anon";

grant insert on table "public"."column_filter" to "anon";

grant references on table "public"."column_filter" to "anon";

grant select on table "public"."column_filter" to "anon";

grant trigger on table "public"."column_filter" to "anon";

grant truncate on table "public"."column_filter" to "anon";

grant update on table "public"."column_filter" to "anon";

grant delete on table "public"."column_filter" to "authenticated";

grant insert on table "public"."column_filter" to "authenticated";

grant references on table "public"."column_filter" to "authenticated";

grant select on table "public"."column_filter" to "authenticated";

grant trigger on table "public"."column_filter" to "authenticated";

grant truncate on table "public"."column_filter" to "authenticated";

grant update on table "public"."column_filter" to "authenticated";

grant delete on table "public"."column_filter" to "service_role";

grant insert on table "public"."column_filter" to "service_role";

grant references on table "public"."column_filter" to "service_role";

grant select on table "public"."column_filter" to "service_role";

grant trigger on table "public"."column_filter" to "service_role";

grant truncate on table "public"."column_filter" to "service_role";

grant update on table "public"."column_filter" to "service_role";

grant delete on table "public"."widget" to "anon";

grant insert on table "public"."widget" to "anon";

grant references on table "public"."widget" to "anon";

grant select on table "public"."widget" to "anon";

grant trigger on table "public"."widget" to "anon";

grant truncate on table "public"."widget" to "anon";

grant update on table "public"."widget" to "anon";

grant delete on table "public"."widget" to "authenticated";

grant insert on table "public"."widget" to "authenticated";

grant references on table "public"."widget" to "authenticated";

grant select on table "public"."widget" to "authenticated";

grant trigger on table "public"."widget" to "authenticated";

grant truncate on table "public"."widget" to "authenticated";

grant update on table "public"."widget" to "authenticated";

grant delete on table "public"."widget" to "service_role";

grant insert on table "public"."widget" to "service_role";

grant references on table "public"."widget" to "service_role";

grant select on table "public"."widget" to "service_role";

grant trigger on table "public"."widget" to "service_role";

grant truncate on table "public"."widget" to "service_role";

grant update on table "public"."widget" to "service_role";

create policy "Authenticated user can manage their column filters"
on "public"."column_filter"
as permissive
for all
to authenticated
using ((( SELECT table_identification.user_id
   FROM table_identification
  WHERE (table_identification.id = column_filter.table_identification_id)) = auth.uid()));


create policy "Authenticated user can manage their table widgets"
on "public"."widget"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));


CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.column_filter FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.widget FOR EACH ROW EXECUTE FUNCTION set_updated_at();


