-- Main table for table identification metadata
CREATE TABLE table_identification(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prefixed_id text NOT NULL,
    user_id uuid NOT NULL,
    has_header boolean NOT NULL DEFAULT FALSE,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (prefixed_id, user_id)
);

-- Table for storing column-level identification details
CREATE TABLE column_identification(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_identification_id bigint NOT NULL REFERENCES table_identification(id) ON DELETE CASCADE,
    column_index integer NOT NULL,
    type text NOT NULL,
    description text NOT NULL,
    is_custom boolean NOT NULL DEFAULT FALSE,
    external_id text,
    external_name text,
    external_kind text,
    min_value numeric,
    max_value numeric,
    log_scale boolean,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (table_identification_id, column_index)
);

-- Table for column suggested actions
CREATE TABLE column_suggested_action(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    column_identification_id bigint NOT NULL REFERENCES column_identification(id) ON DELETE CASCADE,
    action text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Table for column statistics
CREATE TABLE column_stats(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_identification_id bigint NOT NULL REFERENCES table_identification(id) ON DELETE CASCADE,
    column_index integer NOT NULL,
    min_value numeric,
    max_value numeric,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (table_identification_id, column_index)
);

-- Table for column type options
CREATE TABLE column_type_options(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_identification_id bigint NOT NULL REFERENCES table_identification(id) ON DELETE CASCADE,
    column_index integer NOT NULL,
    min_value numeric,
    max_value numeric,
    logarithmic boolean NOT NULL DEFAULT FALSE,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (table_identification_id, column_index)
);

-- Table for column redis status
CREATE TABLE column_redis_data(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_identification_id bigint NOT NULL REFERENCES table_identification(id) ON DELETE CASCADE,
    column_index integer NOT NULL,
    status text,
    matches_count integer,
    total_count integer,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (table_identification_id, column_index)
);

-- Table for redis matches
CREATE TABLE column_redis_match(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    column_redis_data_id bigint NOT NULL REFERENCES column_redis_data(id) ON DELETE CASCADE,
    match_value text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Table for redis info
CREATE TABLE column_redis_info(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    column_redis_data_id bigint NOT NULL REFERENCES column_redis_data(id) ON DELETE CASCADE,
    link_prefix text,
    description text,
    num_entries integer,
    link text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (column_redis_data_id)
);

-- Table for active filters
CREATE TABLE column_filter(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_identification_id bigint NOT NULL REFERENCES table_identification(id) ON DELETE CASCADE,
    column_index integer NOT NULL,
    filter_type text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (table_identification_id, column_index)
);

ALTER TABLE table_identification ENABLE ROW LEVEL SECURITY;

ALTER TABLE column_identification ENABLE ROW LEVEL SECURITY;

ALTER TABLE column_suggested_action ENABLE ROW LEVEL SECURITY;

ALTER TABLE column_stats ENABLE ROW LEVEL SECURITY;

ALTER TABLE column_type_options ENABLE ROW LEVEL SECURITY;

ALTER TABLE column_redis_data ENABLE ROW LEVEL SECURITY;

ALTER TABLE column_redis_match ENABLE ROW LEVEL SECURITY;

ALTER TABLE column_redis_info ENABLE ROW LEVEL SECURITY;

ALTER TABLE column_filter ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Authenticated user can manage their table identifications" ON table_identification
    FOR ALL TO authenticated
        USING (auth.uid() = user_id);

CREATE POLICY "Authenticated user can manage their column identifications" ON column_identification
    FOR ALL TO authenticated
        USING ((
            SELECT
                user_id
            FROM
                table_identification
            WHERE
                id = table_identification_id) = auth.uid());

CREATE POLICY "Authenticated user can manage their column suggested actions" ON column_suggested_action
    FOR ALL TO authenticated
        USING ((
            SELECT
                user_id
            FROM
                table_identification
            WHERE
                id =(
                    SELECT
                        table_identification_id
                    FROM
                        column_identification
                    WHERE
                        id = column_identification_id)) = auth.uid());

CREATE POLICY "Authenticated user can manage their column stats" ON column_stats
    FOR ALL TO authenticated
        USING ((
            SELECT
                user_id
            FROM
                table_identification
            WHERE
                id = table_identification_id) = auth.uid());

CREATE POLICY "Authenticated user can manage their column type options" ON column_type_options
    FOR ALL TO authenticated
        USING ((
            SELECT
                user_id
            FROM
                table_identification
            WHERE
                id = table_identification_id) = auth.uid());

CREATE POLICY "Authenticated user can manage their column redis data" ON column_redis_data
    FOR ALL TO authenticated
        USING ((
            SELECT
                user_id
            FROM
                table_identification
            WHERE
                id = table_identification_id) = auth.uid());

CREATE POLICY "Authenticated user can manage their column redis matches" ON column_redis_match
    FOR ALL TO authenticated
        USING ((
            SELECT
                user_id
            FROM
                table_identification
            WHERE
                id =(
                    SELECT
                        table_identification_id
                    FROM
                        column_redis_data
                    WHERE
                        id = column_redis_data_id)) = auth.uid());

CREATE POLICY "Authenticated user can manage their column redis info" ON column_redis_info
    FOR ALL TO authenticated
        USING ((
            SELECT
                user_id
            FROM
                table_identification
            WHERE
                id =(
                    SELECT
                        table_identification_id
                    FROM
                        column_redis_data
                    WHERE
                        id = column_redis_data_id)) = auth.uid());

CREATE POLICY "Authenticated user can manage their column filters" ON column_filter
    FOR ALL TO authenticated
        USING ((
            SELECT
                user_id
            FROM
                table_identification
            WHERE
                id = table_identification_id) = auth.uid());

-- Add triggers to update updated_at
CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON table_identification
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON column_identification
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON column_suggested_action
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON column_stats
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON column_type_options
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON column_redis_data
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON column_redis_match
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON column_redis_info
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON column_filter
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

