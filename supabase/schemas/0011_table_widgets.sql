-- Create the set_updated_at function
CREATE OR REPLACE FUNCTION public.set_updated_at()
    RETURNS TRIGGER
    AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN new;
END;
$$
LANGUAGE plpgsql;

-- Main table for widgets
CREATE TABLE widget(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prefixed_id text NOT NULL,
    user_id uuid NOT NULL,
    widget_id text NOT NULL,
    engine text NOT NULL,
    type text NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    is_suggested boolean NOT NULL DEFAULT FALSE,
    display_order integer,
    vega_lite_spec text,
    observable_plot_code text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (prefixed_id, user_id, widget_id)
);

ALTER TABLE widget ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Authenticated user can manage their widgets" ON widget
    FOR ALL TO authenticated
        USING (auth.uid() = user_id);

-- Add triggers to update updated_at
CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON widget
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

-- Create a new table for widget preferences
CREATE TABLE widget_preferences(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prefixed_id text NOT NULL,
    user_id uuid NOT NULL,
    active_engine text,
    sidebar_width integer,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (prefixed_id, user_id)
);

ALTER TABLE widget_preferences ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Authenticated user can manage their widget preferences" ON widget_preferences
    FOR ALL TO authenticated
        USING (auth.uid() = user_id);

CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON widget_preferences
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

